% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ErrorLogger.R
\name{ErrorLogger}
\alias{ErrorLogger}
\title{Error Logger}
\usage{
ErrorLogger(
  db_valid,
  key,
  error_message,
  input_error,
  db_connection,
  db_error_table,
  csv_error_table
)
}
\arguments{
\item{db_valid}{does the db exist object from dbCanConnect(); also from RequestLogging()$db_valid}

\item{key}{unique key that you would like to match with items from RequestLogging()$key}

\item{error_message}{specific error message for that if else statment in your api}

\item{input_error}{which input was it that errored out}

\item{db_connection}{standard db connection object; also from RequestLogging()$con}

\item{db_error_table}{the name of the database table where errors will be logged; if one does not exist it will create it for you}

\item{csv_error_table}{path of the csv file where error logs will be stored if the database fails}
}
\value{
will append a database table, or create a database table, or append a csv file, or create a csv file with error logs
}
\description{
Error Logger
}
\examples{
# Using the returned object from req_log_list <- RequestLogging(),
# insert within an if else statement testing the input of an api:
#
# if(is.null(govclass) == TRUE){
#
#    res$status <- 400
#
#    govclass_null_msg <- paste0(res$status, ":",
#                                "GovClass is missing from your input and is required")
#
#    ErrorLogger(db_valid = req_log_list$db_valid, key = req_log_list$key,
#                error_message = govclass_error_msg, input_error = govclass,
#                db_connection = req_log_list$con, db_error_table = "api_error_log",
#                csv_error_table = "api/api_error_log.csv")
#
#    return(list(error = govclass_null_msg))
#  }
}
